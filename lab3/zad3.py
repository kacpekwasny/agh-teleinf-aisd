from random import random
from math import sin
def monte_carlo(point_inside_func, border_l, border_r, border_b, border_t, points_num=None):
    """
    Returns the area under graph.
        Parameters:
            point_inside_func: function(float: x, float: y):
                this function returns boolean value if the point passed in (x, y) is in the calculated area or not.
                this allows for more flexability like calculating area under graph as well as the one of a circle.
                example: func = lambda x, y: x**2 > y           # area under
                         func = lambda x, y: x**2 + y**2 < 4    # area of circle with center at 0,0 and radius 2
            
            border_l, border_r, border_b, border_t: float:
                left, right, top, and bottom borders that create an atea the points will be generated in.. 

            points_num: int:
                number of points that will be randomly generated by which the area will be calculated.
                the more points the higher the precision will be. 
                If points will not be passed, the default number of points will be calculated by: area * 100

        Returns:
            float value of aproximated value of the area under graph.
    """
    border_l, border_r = (border_l, border_r) if border_l < border_r else (border_r, border_l)
    border_b, border_t = (border_b, border_t) if border_b < border_t else (border_t, border_b)
    area = (border_r - border_l) * (border_t - border_b)
    points_inside = 0
    points = points_num if points_num != None else area * 1000
    gen_point = lambda: (random() * (border_r - border_l) + border_l,
                         random() * (border_t - border_b) + border_b) 
    for i in range(points):
        p = gen_point()
        #print(p)
        inside = point_inside_func(*p)
        #print(inside)
        points_inside += 1 if inside else 0

    return points_inside / points * area

if __name__ == "__main__":
    print("area under sin(x) for x in (0, 2) =", monte_carlo( lambda x, y: sin(x) >= y, 0, 2, 0, 1, 10000))
    print("area inside a circle with center at (0,0) with a radius of 2 by monte_carlo =", monte_carlo( lambda x, y:  x**2 + y**2 < 4, -2, 2, -2, 2, 1000000), "and by PI * r**2 =", 3.141592653*4)
        